; Start decls (1)
(declare-fun f_ackermann!0 () (_ BitVec 80))
; End decls
; Start constraints (8)
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0)))))
  (not (fp.isNaN a!1))))
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0)))))
  (= ((_ extract 63 63) f_ackermann!0)
     (ite (or (fp.isSubnormal a!1) (fp.isZero a!1)) #b0 #b1))))
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0)))))
  (= ((_ extract 63 63) f_ackermann!0)
     (ite (or (fp.isSubnormal a!1) (fp.isZero a!1)) #b0 #b1))))
(assert (let ((a!1 (concat (concat ((_ extract 79 79)
                             (concat #x3ffe #xfd70a3d70a3d7000))
                           ((_ extract 78 64)
                             (concat #x3ffe #xfd70a3d70a3d7000)))
                   ((_ extract 62 0) (concat #x3ffe #xfd70a3d70a3d7000)))))
(let ((a!2 (ite (or (fp.isSubnormal ((_ to_fp 15 64) a!1))
                    (fp.isZero ((_ to_fp 15 64) a!1)))
                #b0
                #b1)))
  (= ((_ extract 63 63) (concat #x3ffe #xfd70a3d70a3d7000)) a!2))))
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0)))))
  (= ((_ extract 63 63) f_ackermann!0)
     (ite (or (fp.isSubnormal a!1) (fp.isZero a!1)) #b0 #b1))))
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0)))))
  (= ((_ extract 63 63) f_ackermann!0)
     (ite (or (fp.isSubnormal a!1) (fp.isZero a!1)) #b0 #b1))))
(assert (let ((a!1 (concat (concat ((_ extract 79 79)
                             (concat #x3ffe #xfd70a3d70a3d7000))
                           ((_ extract 78 64)
                             (concat #x3ffe #xfd70a3d70a3d7000)))
                   ((_ extract 62 0) (concat #x3ffe #xfd70a3d70a3d7000)))))
(let ((a!2 (ite (or (fp.isSubnormal ((_ to_fp 15 64) a!1))
                    (fp.isZero ((_ to_fp 15 64) a!1)))
                #b0
                #b1)))
  (= ((_ extract 63 63) (concat #x3ffe #xfd70a3d70a3d7000)) a!2))))
(assert (let ((a!1 ((_ to_fp 15 64)
             (concat (concat ((_ extract 79 79) f_ackermann!0)
                             ((_ extract 78 64) f_ackermann!0))
                     ((_ extract 62 0) f_ackermann!0))))
      (a!2 (concat (concat ((_ extract 79 79)
                             (concat #x3ffe #xfd70a3d70a3d7000))
                           ((_ extract 78 64)
                             (concat #x3ffe #xfd70a3d70a3d7000)))
                   ((_ extract 62 0) (concat #x3ffe #xfd70a3d70a3d7000)))))
(let ((a!3 (fp.mul roundNearestTiesToEven
                   (fp.sqrt roundNearestTiesToEven
                            (fp.mul roundNearestTiesToEven a!1 a!1))
                   ((_ to_fp 15 64) a!2))))
(let ((a!4 (or (fp.isNaN (fp.mul roundNearestTiesToEven
                                 (fp.abs a!1)
                                 ((_ to_fp 15 64) a!2)))
               (fp.isNaN (fp.sqrt roundNearestTiesToEven
                                  (fp.mul roundNearestTiesToEven a!1 a!1)))
               (fp.gt (fp.mul roundNearestTiesToEven
                              (fp.abs a!1)
                              ((_ to_fp 15 64) a!2))
                      (fp.sqrt roundNearestTiesToEven
                               (fp.mul roundNearestTiesToEven a!1 a!1)))
               (fp.isNaN (fp.abs a!1))
               (fp.isNaN a!3)
               (fp.lt (fp.abs a!1) a!3))))
  (not a!4)))))
; End constraints
(check-sat)
(exit)
