# -*- Python -*-
# vim: set filetype=python:
# vim: ts=2:sts=2:sw=2:et:tw=80:

# Configuration file for the 'lit' test runner.

import os
import sys
import re
import platform
import pprint

try:
  import lit.util
  import lit.formats
except ImportError:
  pass

# name: The name of this test suite.
config.name = 'JFS'

# testFormat: The test format to use to interpret tests.
config.test_format = lit.formats.ShTest(execute_external=False)

# suffixes: A list of file extensions to treat as test files
# Note this can be overridden by lit.local.cfg files
config.suffixes = ['.smt2']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
jfs_bin_root = getattr(config, 'jfs_bin_root', None)

if jfs_bin_root is not None:
  config.test_exec_root = os.path.join(jfs_bin_root, 'tests', 'system_tests')

# Propogate some environment variable to test environment.
def addEnv(name):
  if name in os.environ:
    config.environment[name] = os.environ[name]

# Sanitizer environment variables
addEnv('ASAN_OPTIONS')
addEnv('UBSAN_OPTIONS')
addEnv('ASAN_SYMBOLIZER_PATH')
addEnv('LSAN_OPTIONS')
addEnv('MSAN_OPTIONS')
addEnv('MSAN_SYMBOLIZER_PATH')
addEnv('TSAN_OPTIONS')

# Check that the object root is known.
if config.test_exec_root is None:
  lit_config.fatal('test execution root not set!')


# Add a substitution for FileCheck
config.substitutions.append(
  ('%FileCheck', config.filecheck_tool_path)
)

# Add a substitution for not
config.substitutions.append(
  ('%not', config.not_tool_path)
)

# Add a substitution for Clang
cxxStr = '{} -x "c++" -std="c++11" '.format(config.clang_tool_path)
cxxRuntimeStr = '{} -I {} '.format(
  cxxStr,
  os.path.join(config.jfs_bin_root, 'runtime', 'include')
)
cxxRuntimeSyntaxCheckStr = '{} -fsyntax-only '.format(cxxRuntimeStr)
config.substitutions.append(('%cxx-rt-syntax', cxxRuntimeSyntaxCheckStr))
config.substitutions.append(('%cxx-rt', cxxRuntimeStr))
config.substitutions.append(('%cxx', cxxStr))

# Get JFS specific parameters passed on llvm-lit cmd line
# e.g. llvm-lit --param jfs_opts=--help
jfs_extra_params = lit_config.params.get('jfs_opts',"")

# Get custom path to jfs binary if specified
jfs_tool_path = lit_config.params.get('jfs_tool_path', None)
if jfs_tool_path is None:
  # No custom path, use jfs from build tree
  jfs_tool_path = config.jfs_tool_path

# Get custom path to jfs-opt binary if specified
jfs_opt_tool_path = lit_config.params.get('jfs_opt_tool_path', None)
if jfs_opt_tool_path is None:
  # No custom path, use jfs-opt from build tree
  jfs_opt_tool_path = config.jfs_opt_tool_path

# Get custom path to jfs-smt2cnf binary if specified
jfs_smt_to_cnf_tool_path = lit_config.params.get('jfs_smt_to_cnf_tool_path', None)
if jfs_smt_to_cnf_tool_path is None:
  # No custom path, use jfs-smt2cnf from build tree
  jfs_smt_to_cnf_tool_path = config.jfs_smt_to_cnf_tool_path

# Get custom path to jfs-smt2cxx binary if specified
jfs_smt_to_cxx_tool_path = lit_config.params.get('jfs_smt_to_cxx_tool_path', None)
if jfs_smt_to_cxx_tool_path is None:
  # No custom path, use jfs-smt2cxx from build tree
  jfs_smt_to_cxx_tool_path = config.jfs_smt_to_cxx_tool_path

if len(jfs_extra_params) != 0:
  print("Passing extra jfs command line args: {0}".format(
    jfs_extra_params)
  )
  jfs_tool_path += " {}".format(jfs_extra_params)

# Add a substitution for jfs-opt tool
config.substitutions.append(
  ('%jfs-opt', jfs_opt_tool_path)
)

# Add a substitution for jfs-smt2cnf tool
config.substitutions.append(
  ('%jfs-smt2cnf', jfs_smt_to_cnf_tool_path)
)

# Add a substitution for jfs-smt2cxx tool
config.substitutions.append(
  ('%jfs-smt2cxx', jfs_smt_to_cxx_tool_path)
)

# Add substitution to disable optimisation passes
config.substitutions.append(
  (
    '%jfs_no_opt_options',
    '-disable-standard-passes -disable-equality-extraction'
  )
)

# Add a substitution for jfs tool
# Provide a way to automatically validate models in every run of the JFS
# tool. Do this by default.
validate_models_in_jfs = lit_config.params.get('jfs_validate_models', '1')
validate_models_in_jfs = True if validate_models_in_jfs == '1' else False
if validate_models_in_jfs:
  jfs_tool_substitution = '{} -validate-model '.format(jfs_tool_path)
else:
  jfs_tool_substitution = jfs_tool_path

config.substitutions.append(
  ('%jfs', jfs_tool_substitution)
)

config.substitutions.append(
  ('%yaml-syntax-check', config.yaml_syntax_check_tool_path)
)

# Find diff tool
diff_path = lit.util.which('diff')
if diff_path is None:
  lit_config.error('Could not find diff tool')
config.substitutions.append(
  ('%diff', diff_path)
)

# Add features
host_os = platform.system().lower()
lit_config.note('Adding feature "{}"'.format(host_os))
config.available_features.add(host_os)

# HACK:
# Add additional features requested on the command line.
# This exists to workaround the fact that individual tests
# that use `JFSFuzzTestFormat` can't be run without setting
# the right feature flag.
fake_features_str = lit_config.params.get('jfs_fake_features', None)
if fake_features_str is not None:
  assert isinstance(fake_features_str, str)
  fake_features = fake_features_str.split(',')
  assert len(fake_features) > 0
  for fake_feature in fake_features:
    if len(fake_feature) == 0:
      continue
    lit_config.note('Adding fake feature {}'.format(fake_feature))
    config.available_features.add(fake_feature)

lit_config.note('Substitutions: {}'.format(pprint.pformat(config.substitutions)))
lit_config.note('Features: {}'.format(pprint.pformat(config.available_features)))
